name: Publish Module
on:
  workflow_call:
jobs:
  publish:
    name: Publish Module
    runs-on: windows-latest
    steps:
      # Get the current version
      - uses: actions/checkout@v4
      - name: Install and cache PSDepend
        id: psdepend
        uses: potatoqualitee/psmodulecache@v6.2.1
        with:
          modules-to-cache: PSDepend:0.3.8, BuildHelpers
      - shell: pwsh
        name: Check if this version is already published
        # Give an id to the step, so we can reference it later
        id: check_if_versions_bumped
        run: |
          Set-BuildEnvironment
          [version]$GalleryVersion = Get-NextNugetPackageVersion -Name $env:BHProjectName -ErrorAction Stop
          [version]$GithubVersion = Get-MetaData -Path $env:BHPSModuleManifest -PropertyName ModuleVersion -ErrorAction Stop
          $bumped = $GithubVersion -ge $GalleryVersion

          # Set the output named "version_bumped"
          Write-Host "::set-output name=version_bumped::$bumped"
      - name: Determine modules to cache
        shell: pwsh
        id: modules-to-cache
        if: steps.check_if_versions_bumped.outputs.version_bumped == 'True'
        run: |
          $dependancies = Get-Dependency
          $f = $dependancies | ?{ $_.DependencyType -eq 'PSGalleryModule' } | %{ "{0}:{1}" -F $_.DependencyName, $_.Version}
          Write-Output "::set-output name=ModulesToCache::$($f -join ', ')"
      - name: Install and cache PowerShell modules
        id: psmodulecache
        uses: potatoqualitee/psmodulecache@v6.2.1
        if: steps.check_if_versions_bumped.outputs.version_bumped == 'True'
        with:
          modules-to-cache: ${{ steps.modules-to-cache.outputs.ModulesToCache }}
          shell: pwsh
      - name: Publish to PSGallery
        shell: pwsh
        if: steps.check_if_versions_bumped.outputs.version_bumped == 'True'
        env:
          PSGALLERY_API_KEY: ${{ secrets.PS_GALLERY_KEY }}
        run: ./build.ps1 -Task Publish
